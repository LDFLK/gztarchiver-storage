name: gztarchiver

on:
  schedule:
    - cron: "0 */2 * * *"  # every 2 hours
  workflow_dispatch:        # allows manual trigger

jobs:
  run-archiver:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout storage repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TARGET_REPO_PAT }}
       
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
       
      - name: Install archiver package
        run: pip install git+https://github.com/yasandu0505/gztarchiver.git
       
      - name: Create config.yaml from secret
        run: |
          echo "${{ secrets.GZTARCHIVER_CONFIG }}" > config.yaml
       
      - name: Run archiver
        run: |
          gztarchiver --year 2010 --month 06 --day 24 --lang en --config config.yaml
          gztarchiver --year 2019 --month 12 --day 31 --lang en --config config.yaml
          rm -rf metadata
       
      - name: Commit and push doc-archive
        run: |
          git config user.name "yasandu0505"
          git config user.email "yasanduyaka2005@gmail.com"
          git add doc-archive
          git commit -m "üîÑ Auto-update archive - $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push origin main --force
             
      - name: Update README with status
        run: |
          # Get timestamp
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          
          # Count documents
          TOTAL_DOCS=$(find doc-archive -type f -name "*.pdf" | wc -l)
          TOTAL_UNAVAILABLE=$(find doc-archive -type f -name "unavailable.txt" | wc -l)
          
          # Extract date range from actual files
          if [ $TOTAL_DOCS -gt 0 ]; then
            START_DATE=$(find doc-archive -type f -name "*.pdf" | head -1 | xargs basename | cut -d'_' -f1 | sed 's/gazette-//')
            END_DATE=$(find doc-archive -type f -name "*.pdf" | tail -1 | xargs basename | cut -d'_' -f1 | sed 's/gazette-//')
            DATE_RANGE="from $START_DATE to $END_DATE"
          else
            DATE_RANGE="No documents archived yet"
          fi
          
          # Generate per-year summary with both archived and unavailable docs
          SUMMARY_TABLE=$(
            # Get archived docs by year
            find doc-archive -type f -name "*.pdf" | awk -F'/' '{print $2}' | sort | uniq -c > /tmp/archived_counts.txt
            
            # Get unavailable docs by year  
            find doc-archive -type f -name "unavailable.txt" | awk -F'/' '{print $2}' | sort | uniq -c > /tmp/unavailable_counts.txt
            
            # Combine both counts by year
            awk '
            BEGIN { 
                while ((getline line < "/tmp/archived_counts.txt") > 0) {
                    split(line, a); archived[a[2]] = a[1]
                }
                while ((getline line < "/tmp/unavailable_counts.txt") > 0) {
                    split(line, u); unavailable[u[2]] = u[1]
                }
                close("/tmp/archived_counts.txt")
                close("/tmp/unavailable_counts.txt")
                
                # Get all years and sort them
                for (year in archived) years[year] = 1
                for (year in unavailable) years[year] = 1
                
                n = asorti(years, sorted_years)
                for (i = 1; i <= n; i++) {
                    year = sorted_years[i]
                    arch_count = (year in archived) ? archived[year] : 0
                    unav_count = (year in unavailable) ? unavailable[year] : 0
                    printf "| %s | %s | %s |\n", year, arch_count, unav_count
                }
            }'
          )
          
          # Write README.md
          cat <<EOF > README.md
          # Sri Lanka üá±üá∞ - Gazette Dataset
          
          Last Updated: $TIMESTAMP
          
          $TOTAL_DOCS documents, $DATE_RANGE.
                    
          üêû #WorkInProgress - Suggestions, Questions, Ideas, Bug Reports are welcome!
          
          ---
          
          ## üìä Archive Status Dashboard
          
          **Last Archiver Run:** $TIMESTAMP
          
          **Summary of Documents Archived:**
          
          | Year | Archived Docs | Unavailable Docs |
          |------|---------------|-----------------|
          $SUMMARY_TABLE
          
          **Total Documents:** $TOTAL_DOCS  
          **Unavailable Documents:** $TOTAL_UNAVAILABLE 
          
          ---
          #Legal #OpenData #GovTech
          EOF
          
          # Commit and push README.md
          git config user.name "yasandu0505"
          git config user.email "yasanduyaka2005@gmail.com"
          git add README.md
          git commit -m "üìä Update status dashboard - $TIMESTAMP" || echo "No changes to commit"
          git push origin main --force